generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  framework      String?
  language       String?
  stylingLibrary String?
  expires        DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  files         File[]
  folders       Folder[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  headingId String    @unique
  parentId  String?
  ownerId   String
  files     File[]
  heading   Component @relation("FolderHeading", fields: [headingId], references: [id])
  owner     User      @relation(fields: [ownerId], references: [id])
  parent    Folder?   @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]  @relation("FolderToFolder")

  @@index([parentId])
  @@index([ownerId])
}

model File {
  id         String      @id @default(uuid())
  headingId  String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  folderId   String
  ownerId    String
  components Component[] @relation("FileComponents")
  folder     Folder      @relation(fields: [folderId], references: [id], onDelete: Cascade)
  heading    Component   @relation("FileHeading", fields: [headingId], references: [id])
  owner      User        @relation(fields: [ownerId], references: [id])

  @@index([folderId])
  @@index([ownerId])
}

model Component {
  id             String         @id @default(uuid())
  content        String?
  position       Int?
  type           ComponentTypes @default(BODY)
  fileId         String?
  file           File?          @relation("FileComponents", fields: [fileId], references: [id])
  headingForFile File?          @relation("FileHeading")
  folder         Folder?        @relation("FolderHeading")
}

enum ComponentTypes {
  HEADING
  BODY
  CODE
}
