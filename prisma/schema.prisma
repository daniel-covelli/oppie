// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id             String   @id @default(cuid())
    sessionToken   String   @unique
    userId         String
    framework      String?
    language       String?
    stylingLibrary String?
    expires        DateTime
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    folders       Folder[]
    files         File[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Folder {
    id String @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    headingId String    @unique
    heading   Component @relation("FolderHeading", fields: [headingId], references: [id])

    // Self-relation for parent-child relationship
    parentId String?
    parent   Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
    children Folder[] @relation("FolderToFolder")

    // Relation to files contained in this folder
    files File[]

    // Relation to user who owns this folder
    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id])

    @@index([parentId])
    @@index([ownerId])
}

model File {
    id String @id @default(uuid())

    headingId String    @unique
    heading   Component @relation("FileHeading", fields: [headingId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relation to the folder containing this file
    folderId String
    folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

    // Relation to user who owns this file
    ownerId    String
    owner      User        @relation(fields: [ownerId], references: [id])
    components Component[] @relation("FileComponents")

    @@index([folderId])
    @@index([ownerId])
}

enum ComponentTypes {
    HEADING
    BODY
    CODE
}

model Component {
    id      String @id @default(uuid())
    content String?

    position Int?
    type     ComponentTypes @default(BODY)

    fileId         String?
    file           File?   @relation("FileComponents", fields: [fileId], references: [id])
    headingForFile File?   @relation("FileHeading")
    folder         Folder? @relation("FolderHeading")
}
